module xpand.example.Generator

import org.eclipse.emf.mwe.utils.Reader
import org.eclipse.emf.mwe.utils.StandaloneSetup
import org.eclipse.emf.mwe.utils.DirectoryCleaner
import org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel
import org.eclipse.xtend.check.CheckComponent
import org.eclipse.xpand2.Generator
import org.eclipse.xpand2.output.JavaBeautifier
import org.eclipse.xtend.expression.ResourceManagerDefaultImpl

var modelUri  = "platform:/resource/my.generator.project/src/Model.xmi"
var dirSrcGen = "src-gen"


Workflow {
	/* set up EMF for standalone execution */
	bean = StandaloneSetup { platformUri="." 
		
		
	}

	/** instantiate metamodel */
	bean = EmfRegistryMetaModel {  
		
		
	}
	bean = org.eclipse.xtend.type.impl.java.JavaMetaModel:jj{
	
	
	}

	bean = JavaBeautifier : formatter_java { }

	/* load model and store it in slot 'model' */
	component = Reader {
		uri = modelUri
		modelSlot = "model"
	}

	/* check model */
	component = CheckComponent {
		
		metaModel = org.eclipse.xtend.typesystem.emf.EmfMetaModel{
			metaModelFile="metamodel/metamodel.ecore"
		}
		checkFile = "metamodel::Checks"
		emfAllChildrenSlot = "model"
	}

	/** Clear output directory */
	component = DirectoryCleaner {
		directory = dirSrcGen
	}

	/* generate code */
	component = Generator {
		metaModel = org.eclipse.xtend.typesystem.emf.EmfMetaModel{//include src folder also 
			metaModelFile="platform:/resource/my.generator.project/src/metamodel/metamodel.ecore"
		}
		metaModel=jj
		advice = "workflow::advice"
		expand = "template::Template::main FOR model"
		outlet = {
			path = dirSrcGen
			postprocessor = formatter_java
			fileEncoding = "ISO-8859-1" // this is the encoding for files written the outlet
		}
		// configure Xpand resource encoding (check project resource setting)
		resourceManager = ResourceManagerDefaultImpl {
			fileEncoding = "ISO-8859-1"
		}
	}
}