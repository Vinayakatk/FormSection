/*
 * generated by Xtext
 */
package org.xtext.example.mydsl2.ui.contentassist

import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.jface.dialogs.InputDialog
import org.eclipse.jface.text.contentassist.ICompletionProposal
import org.eclipse.swt.widgets.ColorDialog
import org.eclipse.swt.widgets.Display
import org.eclipse.ui.dialogs.ElementListSelectionDialog
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.builder.builderState.EObjectDescription
import org.eclipse.xtext.resource.IGlobalServiceProvider.ResourceServiceProviderImpl
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor.Delegate
import org.eclipse.xtext.ui.editor.contentassist.ReplacementTextApplier
import org.xtext.example.mydsl2.myDsl.MyDslPackage
import org.xtext.example.mydsl2.ui.contentassist.AbstractMyDslProposalProvider
import org.xtext.example.mydsl2.ui.labeling.MyDslLabelProvider
import java.util.List
import org.eclipse.xtext.ui.label.DefaultDescriptionLabelProvider

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class MyDslProposalProvider extends AbstractMyDslProposalProvider {
@Inject
IGlobalScopeProvider pro

@Inject
DefaultDescriptionLabelProvider label

	override completeUse_Use(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		val createCompletionProposal1 = createCompletionProposal("pick color",context)
		if(createCompletionProposal1 instanceof ConfigurableCompletionProposal){
			var c = createCompletionProposal1 as ConfigurableCompletionProposal
			c.textApplier = new ReplacementTextApplier(){
				
				override getActualReplacementString(ConfigurableCompletionProposal proposal) {
					var  d = context.viewer.textWidget.display as Display
//					var cc = new InputDialog(d.activeShell,"","","",null)
//					cc.open
					var scope = pro.getScope(model.eResource,MyDslPackage.eINSTANCE.use_Use,null)
					var ElementListSelectionDialog el = new ElementListSelectionDialog(d.activeShell,label)
					el.elements = scope.allElements
					println(scope.allElements)
					el.blockOnOpen = true
					el.open
					proposal.replacementString="sdfdsfdsfdsfdsfds"
					val eObjectDescription = el.result.get(0) as EObjectDescription
					'''"«eObjectDescription.name»"  '''
				}
				
			}
			
		}
        val stringProposalDelegate = new  StringProposalDelegate(acceptor, context)
        stringProposalDelegate.accept(createCompletionProposal1)
								super.completeUse_Use( model,  assignment,  context,  stringProposalDelegate)
    }
 
    static class StringProposalDelegate extends Delegate {
 
        ContentAssistContext ctx
 
        new(ICompletionProposalAcceptor delegate, ContentAssistContext ctx) {
            super(delegate)
            this.ctx = ctx
            
        }
 
        override accept(ICompletionProposal proposal) {
        
            if (proposal instanceof ConfigurableCompletionProposal) {
            	var ConfigurableCompletionProposal proposa = proposal as ConfigurableCompletionProposal;
            	proposal.additionalProposalInfo="hello there"
            	proposa.setAdditionalData("a","yahoo");
            	
            	proposa.selectionStart = proposal.replacementOffset
            	println(ctx.document.get(proposal.replacementOffset,proposal.replaceContextLength))
//            	ctx.document.replace(proposal.replaceContextLength+proposal.replacementOffset-1,1,"");
                val endPos = proposal.replacementOffset + proposal.replacementLength 
                if (ctx.document != null && ctx.document.length > endPos) {
                    // We are not at the end of the file
                    if ("\"" == ctx.document.get(endPos, 1)) {
//                        proposal.replacementLength = proposal.replacementLength-1
                        proposal.replacementString = proposal.replacementString.substring(0,proposal.replacementString.length-1)
                    }
                }
            }
            super.accept(proposal)
        }
 
    }
	}
	

