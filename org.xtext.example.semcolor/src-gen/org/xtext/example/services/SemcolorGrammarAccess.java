/*
 * generated by Xtext
 */
package org.xtext.example.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SemcolorGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PersonsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Persons");
		private final Assignment cPersonsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPersonsPersonParserRuleCall_0 = (RuleCall)cPersonsAssignment.eContents().get(0);
		
		//Persons:
		//	persons+=Person*;
		@Override public ParserRule getRule() { return rule; }

		//persons+=Person*
		public Assignment getPersonsAssignment() { return cPersonsAssignment; }

		//Person
		public RuleCall getPersonsPersonParserRuleCall_0() { return cPersonsPersonParserRuleCall_0; }
	}

	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Person");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cGenderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGenderGenderEnumRuleCall_1_0 = (RuleCall)cGenderAssignment_1.eContents().get(0);
		
		//Person:
		//	name=Name gender=Gender?;
		@Override public ParserRule getRule() { return rule; }

		//name=Name gender=Gender?
		public Group getGroup() { return cGroup; }

		//name=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//gender=Gender?
		public Assignment getGenderAssignment_1() { return cGenderAssignment_1; }

		//Gender
		public RuleCall getGenderGenderEnumRuleCall_1_0() { return cGenderGenderEnumRuleCall_1_0; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstNameIDTerminalRuleCall_0_0 = (RuleCall)cFirstNameAssignment_0.eContents().get(0);
		private final Assignment cLastNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLastNameIDTerminalRuleCall_1_0 = (RuleCall)cLastNameAssignment_1.eContents().get(0);
		
		//Name:
		//	firstName=ID lastName=ID;
		@Override public ParserRule getRule() { return rule; }

		//firstName=ID lastName=ID
		public Group getGroup() { return cGroup; }

		//firstName=ID
		public Assignment getFirstNameAssignment_0() { return cFirstNameAssignment_0; }

		//ID
		public RuleCall getFirstNameIDTerminalRuleCall_0_0() { return cFirstNameIDTerminalRuleCall_0_0; }

		//lastName=ID
		public Assignment getLastNameAssignment_1() { return cLastNameAssignment_1; }

		//ID
		public RuleCall getLastNameIDTerminalRuleCall_1_0() { return cLastNameIDTerminalRuleCall_1_0; }
	}
	
	
	public class GenderElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Gender");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUnknownEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUnknownUnknownKeyword_0_0 = (Keyword)cUnknownEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFemaleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFemaleFemaleKeyword_1_0 = (Keyword)cFemaleEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMaleEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMaleMaleKeyword_2_0 = (Keyword)cMaleEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Gender:
		//	unknown | female | male;
		public EnumRule getRule() { return rule; }

		//unknown | female | male
		public Alternatives getAlternatives() { return cAlternatives; }

		//unknown
		public EnumLiteralDeclaration getUnknownEnumLiteralDeclaration_0() { return cUnknownEnumLiteralDeclaration_0; }

		//"unknown"
		public Keyword getUnknownUnknownKeyword_0_0() { return cUnknownUnknownKeyword_0_0; }

		//female
		public EnumLiteralDeclaration getFemaleEnumLiteralDeclaration_1() { return cFemaleEnumLiteralDeclaration_1; }

		//"female"
		public Keyword getFemaleFemaleKeyword_1_0() { return cFemaleFemaleKeyword_1_0; }

		//male
		public EnumLiteralDeclaration getMaleEnumLiteralDeclaration_2() { return cMaleEnumLiteralDeclaration_2; }

		//"male"
		public Keyword getMaleMaleKeyword_2_0() { return cMaleMaleKeyword_2_0; }
	}
	
	private final PersonsElements pPersons;
	private final PersonElements pPerson;
	private final NameElements pName;
	private final GenderElements unknownRuleGender;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SemcolorGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPersons = new PersonsElements();
		this.pPerson = new PersonElements();
		this.pName = new NameElements();
		this.unknownRuleGender = new GenderElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.Semcolor".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Persons:
	//	persons+=Person*;
	public PersonsElements getPersonsAccess() {
		return pPersons;
	}
	
	public ParserRule getPersonsRule() {
		return getPersonsAccess().getRule();
	}

	//Person:
	//	name=Name gender=Gender?;
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}

	//Name:
	//	firstName=ID lastName=ID;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//enum Gender:
	//	unknown | female | male;
	public GenderElements getGenderAccess() {
		return unknownRuleGender;
	}
	
	public EnumRule getGenderRule() {
		return getGenderAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
