/*
 * generated by Xtext
 */
package org.xtext.example.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.semcolor.Name;
import org.xtext.example.semcolor.Person;
import org.xtext.example.semcolor.Persons;
import org.xtext.example.semcolor.SemcolorPackage;
import org.xtext.example.services.SemcolorGrammarAccess;

@SuppressWarnings("all")
public class SemcolorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SemcolorGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == SemcolorPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case SemcolorPackage.NAME:
				sequence_Name(context, (Name) semanticObject); 
				return; 
			case SemcolorPackage.PERSON:
				sequence_Person(context, (Person) semanticObject); 
				return; 
			case SemcolorPackage.PERSONS:
				sequence_Persons(context, (Persons) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (firstName=ID lastName=ID)
	 */
	protected void sequence_Name(EObject context, Name semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, SemcolorPackage.Literals.NAME__FIRST_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SemcolorPackage.Literals.NAME__FIRST_NAME));
			if(transientValues.isValueTransient(semanticObject, SemcolorPackage.Literals.NAME__LAST_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SemcolorPackage.Literals.NAME__LAST_NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getNameAccess().getFirstNameIDTerminalRuleCall_0_0(), semanticObject.getFirstName());
		feeder.accept(grammarAccess.getNameAccess().getLastNameIDTerminalRuleCall_1_0(), semanticObject.getLastName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=Name gender=Gender?)
	 */
	protected void sequence_Person(EObject context, Person semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     persons+=Person*
	 */
	protected void sequence_Persons(EObject context, Persons semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
