/*
 * generated by Xtext
 */
grammar InternalSemcolor;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.services.SemcolorGrammarAccess;

}

@parser::members {

 	private SemcolorGrammarAccess grammarAccess;
 	
    public InternalSemcolorParser(TokenStream input, SemcolorGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Persons";	
   	}
   	
   	@Override
   	protected SemcolorGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePersons
entryRulePersons returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPersonsRule()); }
	 iv_rulePersons=rulePersons 
	 { $current=$iv_rulePersons.current; } 
	 EOF 
;

// Rule Persons
rulePersons returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPersonsAccess().getPersonsPersonParserRuleCall_0()); 
	    }
		lv_persons_0_0=rulePerson		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersonsRule());
	        }
       		add(
       			$current, 
       			"persons",
        		lv_persons_0_0, 
        		"Person");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRulePerson
entryRulePerson returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPersonRule()); }
	 iv_rulePerson=rulePerson 
	 { $current=$iv_rulePerson.current; } 
	 EOF 
;

// Rule Person
rulePerson returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPersonAccess().getNameNameParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersonRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPersonAccess().getGenderGenderEnumRuleCall_1_0()); 
	    }
		lv_gender_1_0=ruleGender		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPersonRule());
	        }
       		set(
       			$current, 
       			"gender",
        		lv_gender_1_0, 
        		"Gender");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleName
entryRuleName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current; } 
	 EOF 
;

// Rule Name
ruleName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_firstName_0_0=RULE_ID
		{
			newLeafNode(lv_firstName_0_0, grammarAccess.getNameAccess().getFirstNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"firstName",
        		lv_firstName_0_0, 
        		"ID");
	    }

)
)(
(
		lv_lastName_1_0=RULE_ID
		{
			newLeafNode(lv_lastName_1_0, grammarAccess.getNameAccess().getLastNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"lastName",
        		lv_lastName_1_0, 
        		"ID");
	    }

)
))
;





// Rule Gender
ruleGender returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='unknown' 
	{
        $current = grammarAccess.getGenderAccess().getUnknownEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGenderAccess().getUnknownEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='female' 
	{
        $current = grammarAccess.getGenderAccess().getFemaleEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGenderAccess().getFemaleEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='male' 
	{
        $current = grammarAccess.getGenderAccess().getMaleEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getGenderAccess().getMaleEnumLiteralDeclaration_2()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


