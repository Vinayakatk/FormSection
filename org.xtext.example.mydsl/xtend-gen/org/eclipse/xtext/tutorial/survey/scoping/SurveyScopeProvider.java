/**
 * generated by Xtext
 */
package org.eclipse.xtext.tutorial.survey.scoping;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.tutorial.survey.survey.Choice;
import org.eclipse.xtext.tutorial.survey.survey.ChoiceQuestion;
import org.eclipse.xtext.tutorial.survey.survey.Guard;
import org.eclipse.xtext.tutorial.survey.survey.Page;
import org.eclipse.xtext.tutorial.survey.survey.Question;
import org.eclipse.xtext.xbase.lib.InputOutput;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class SurveyScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_Guard_answer(final Guard guard, final EReference ref) {
    IScope _xblockexpression = null;
    {
      InputOutput.<String>println("guard answer scope called");
      IScope _xifexpression = null;
      ChoiceQuestion _question = guard.getQuestion();
      boolean _equals = Objects.equal(_question, null);
      if (_equals) {
        _xifexpression = IScope.NULLSCOPE;
      } else {
        ChoiceQuestion _question_1 = guard.getQuestion();
        EList<Choice> _choices = _question_1.getChoices();
        _xifexpression = Scopes.scopeFor(_choices);
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public IScope scope_Guard_question(final Guard guard, final EReference ref) {
    IScope _xblockexpression = null;
    {
      InputOutput.<String>println("guard question scope called");
      Page _containerOfType = EcoreUtil2.<Page>getContainerOfType(guard, Page.class);
      EList<Question> _questions = ((Page) _containerOfType).getQuestions();
      _xblockexpression = Scopes.scopeFor(_questions);
    }
    return _xblockexpression;
  }
}
