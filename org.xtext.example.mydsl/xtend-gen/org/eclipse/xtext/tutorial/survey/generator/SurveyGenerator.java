/**
 * generated by Xtext
 */
package org.eclipse.xtext.tutorial.survey.generator;

import com.google.inject.Inject;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.parser.IParser;
import org.eclipse.xtext.resource.IReferenceDescription;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.resource.IResourceDescriptions;
import org.eclipse.xtext.serializer.impl.Serializer;
import org.eclipse.xtext.tutorial.survey.survey.Page;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SurveyGenerator implements IGenerator {
  @Inject
  private IResourceDescriptions des;
  
  @Inject
  private Serializer ser;
  
  @Inject
  private IParser par;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    final EObject head = IterableExtensions.<EObject>head(_contents);
    InputOutput.<EObject>println(head);
    TreeIterator<EObject> _eAllContents = head.eAllContents();
    final Function1<EObject, Boolean> _function = (EObject it) -> {
      return Boolean.valueOf((it instanceof Page));
    };
    EObject page = IteratorExtensions.<EObject>findFirst(_eAllContents, _function);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("names");
    InputOutput.<String>println(_builder.toString());
    URI _uRI = resource.getURI();
    final IResourceDescription resourceDescription = this.des.getResourceDescription(_uRI);
    Iterable<QualifiedName> _importedNames = resourceDescription.getImportedNames();
    final Consumer<QualifiedName> _function_1 = (QualifiedName it) -> {
      String _string = it.toString();
      InputOutput.<String>println(_string);
    };
    _importedNames.forEach(_function_1);
    URI _uRI_1 = resource.getURI();
    IResourceDescription _resourceDescription = this.des.getResourceDescription(_uRI_1);
    Iterable<IReferenceDescription> _referenceDescriptions = _resourceDescription.getReferenceDescriptions();
    final Consumer<IReferenceDescription> _function_2 = (IReferenceDescription it) -> {
      StringConcatenation _builder_1 = new StringConcatenation();
      URI _sourceEObjectUri = it.getSourceEObjectUri();
      String _fileString = _sourceEObjectUri.toFileString();
      _builder_1.append(_fileString, "");
      _builder_1.append("  ");
      URI _targetEObjectUri = it.getTargetEObjectUri();
      String _fileString_1 = _targetEObjectUri.toFileString();
      _builder_1.append(_fileString_1, "");
      InputOutput.<String>println(_builder_1.toString());
    };
    _referenceDescriptions.forEach(_function_2);
    InputOutput.println();
  }
}
