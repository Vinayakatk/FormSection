/*
 * generated by Xtext
 */
package org.eclipse.xtext.tutorial.survey.scoping

import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.tutorial.survey.survey.Guard
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.tutorial.survey.survey.Page
import com.google.inject.Inject
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider
import org.eclipse.xtext.tutorial.survey.survey.Main
import org.eclipse.xtext.scoping.impl.ImportUriResolver
import org.eclipse.xtext.linking.impl.ImportedNamesAdapter.WrappingScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 * 
 */
class SurveyScopeProvider extends org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider {

	@Inject
	ImportedNamespaceAwareLocalScopeProvider ss

	def scope_Guard_answer(Guard guard, EReference ref) {
		println("guard answer scope called")

		if (guard.question == null)
			IScope.NULLSCOPE
		else
			Scopes.scopeFor(guard.question.choices)
	}

	def scope_Guard_question(Guard guard, EReference ref) {
		println("guard question scope called")
		ss.getScope(guard, ref)
		
	}

}
