/*
 * generated by Xtext
 */
package org.eclipse.xtext.tutorial.survey.generator

import com.google.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.parser.IParser
import org.eclipse.xtext.resource.IResourceDescriptions

import org.eclipse.xtext.tutorial.survey.survey.Main
import org.eclipse.xtext.serializer.impl.Serializer
import org.eclipse.xtext.tutorial.survey.survey.Page
import org.eclipse.xtext.XtextFactory
import java.io.StringReader

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SurveyGenerator implements IGenerator {
	
	
	@Inject
	IResourceDescriptions des
	@Inject
	var Serializer ser
	@Inject
	IParser par
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//	val head = resource.contents.head
//	println(head)
//	var main = head.eAllContents.findFirst[it instanceof Page]
//	println('''names''')
//	 val resourceDescription = des.getResourceDescription(resource.URI)
//		resourceDescription.importedNames.forEach[println(it.toString)]
//	des.getResourceDescription(resource.URI).referenceDescriptions.forEach[println('''«it.sourceEObjectUri.toFileString»  «it.targetEObjectUri.toFileString»''')]
//	var ser2 = ser.serialize(main)
//	println(ser2)
//	var p = XtextFactory.eINSTANCE.createParserRule
//	p.name = "Page"
//	var parser = par.parse(p,new StringReader(ser2))
//	println(parser)
//	println(parser.rootASTElement instanceof Page)
//	println()
	}
}
